name: Build and Publish Docker Image

on:
  push:
    branches: [ main ]
    tags: [ 'v*' ]
    paths:
      - 'Dockerfile'
      - 'docker-compose.yml'
      - 'providers/**'
      - 'config/**'
      - 'scripts/**'
      - 'startup.py'
      - 'custom_handler.py'
      - 'requirements.txt'
      - '.github/workflows/build-and-publish.yml'
  pull_request:
    branches: [ main ]
    paths:
      - 'Dockerfile'
      - 'docker-compose.yml'
      - 'providers/**'
      - 'config/**'
      - 'scripts/**'
      - 'startup.py'
      - 'custom_handler.py'
      - 'requirements.txt'
      - '.github/workflows/build-and-publish.yml'
  workflow_dispatch:

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  build:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to the Container registry
        if: github.event_name != 'pull_request'
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=raw,value=latest,enable={{is_default_branch}}

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile
          platforms: linux/amd64,linux/arm64
          push: ${{ github.event_name != 'pull_request' }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          build-args: |
            BUILDKIT_INLINE_CACHE=1

  test:
    needs: build
    if: github.event_name == 'pull_request'
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Test container
        run: |
          # Test that the container can start
          docker run --rm \
            -e LITELLM_MASTER_KEY=sk-test-key \
            -e CLAUDE_CODE_OAUTH_TOKEN=sk-ant-oat01-test \
            ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:pr-${{ github.event.number }} \
            python --version
          
          # Test that LiteLLM is installed
          docker run --rm \
            -e LITELLM_MASTER_KEY=sk-test-key \
            -e CLAUDE_CODE_OAUTH_TOKEN=sk-ant-oat01-test \
            ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:pr-${{ github.event.number }} \
            litellm --version || echo "LiteLLM version check"
          
          # Test that the Claude CLI is available
          docker run --rm \
            -e LITELLM_MASTER_KEY=sk-test-key \
            -e CLAUDE_CODE_OAUTH_TOKEN=sk-ant-oat01-test \
            ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:pr-${{ github.event.number }} \
            claude --version